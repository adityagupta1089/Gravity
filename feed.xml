<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Aditya Gupta</title>
    <description></description>
    <link>https://adityagupta1089.github.io/</link>
    <atom:link href="https://adityagupta1089.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Tue, 29 Oct 2019 20:22:33 +0000</pubDate>
    <lastBuildDate>Tue, 29 Oct 2019 20:22:33 +0000</lastBuildDate>
    <generator>Jekyll v3.8.6</generator>
    
      <item>
        <title>Splay Trees</title>
        <description>&lt;p&gt;Self-adjusting binary trees that work in $O(\log n)$ amortized time bound. The operation performed is the &lt;em&gt;splay&lt;/em&gt; operation.&lt;/p&gt;

&lt;p&gt;For a splay operation at node x: ($p(x)$ is the parent of $x$)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Case (a):&lt;/strong&gt; If $x$ has a parent but no grandparent we rotate at $p(x)$.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Case (b):&lt;/strong&gt; If $x$ has a grandparent and both $x$ and $p(x)$ are both left or right childrenn, we rotate at $p^2(x)$ and then at $p(x)$.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Case (c):&lt;/strong&gt; If $x$ has a grandparent and $x$ is a left and $p(x)$ is a right child, or vice versa, we rotate at $p(x)$ and then at the new parent of $x$.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://adityagupta1089.github.io/images/splaytree1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This moves $x$ to the root of the tree while rearranging the rest of the original path to $x$.&lt;/p&gt;

&lt;p&gt;We perform a splay operation during each access or update operation. Using amortized time analysis for $m$ operations total time taken is $O(m\log n)$ or $O(\log n)$ amortized time per operation.&lt;/p&gt;

&lt;h1 id=&quot;amortized-time-analysis&quot;&gt;Amortized Time Analysis&lt;/h1&gt;

&lt;p&gt;Let $T$ be a tree of $n$ nodes. For node $v\in T$ let $n_T(v)$ ve the number of nodes in the subtree of $v$ including $v$.&lt;/p&gt;

&lt;p&gt;We define the potential function $\phi(T)=\sum_{v\in T}r_T(v)$ where $r_{T}(v)=\log &lt;em&gt;{2}\lfloor n&lt;/em&gt;{T}(v)\rfloor$.&lt;/p&gt;

&lt;p&gt;For a completely skewed tree it will be $\log_2n+\log_2(n-1)+\ldots \log_21=O(n\log n)$.&lt;/p&gt;

&lt;p&gt;For a completely balanced tree of height $h$ it will be $\sum_{i=0}^h2^i\log_2(2^{h-i+1})=\sum_{i=0}^h2^i(h-i+1)=O(n)$&lt;/p&gt;

&lt;p&gt;Suppose the tree undergoes $m$ searches for keys $k_{i_1},k_{i_2},\ldots k_{i_m}$ starting from tree $T_0$ and after searching for $k_{i_1}$ to $T_1$ and so on until $T_m$.&lt;/p&gt;

&lt;p&gt;Let actual cost of $i^{\rm th}$ search be $c_i$ and amortized cost of $i^{\rm th}$ search be $\hat c_i=c_i+\phi(T_i)-\phi(T_{i-1})$. We claim that $\hat{c}_{i} \leqslant 3 \log _{2} n$. Hence actual cost becomes
&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{align}
\sum_{i=1}^mc_i&amp;=\sum_{i=1}^m[\hat c_i+\phi(T_{i-1})-\phi(T_i)]\\
&amp;=\sum_{i=1}^m\hat c_i+\sum_{i=1}^m(\phi(T_{i-1}-\phi(T_i)))\\
&amp;=\sum_{i=1}^m\hat c_i+[\phi(T_0)-\phi(T_m)]\\
&amp;=\sum_{i=1}^m\hat c_i+n\log n\\
&amp;\le3m\log n+n\log n\\
&amp;\le 4m\log n\tag{$m\ge n$}
\end{align} %]]&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;Now we prove $\hat{c}_{i} \leqslant 3 \log _{2} n$ for various cases. $r’$ represents the rank after rotation.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Lemma&lt;/strong&gt; If $a+b\le c$ then $\log a+\log b\le 2\log c-2$ since $ab\le c^2/4$  where $c^2\ge (a+b)^2\ge 4ab$ using AM-GM inequality.&lt;/p&gt;

&lt;h2 id=&quot;case-a-zig&quot;&gt;Case (a) (zig)&lt;/h2&gt;

&lt;p&gt;Total cost involves 1 rotation and potential change. We have $r’(x)=r(y)$ so $\Delta \phi=(r’(x)+r’(y))-(r(x)+r(y))=r’(y)-r(x)\le r’(x)-r(x)$ as $y$ has less nodes afterwards and less rank. So $\hat c_i\le 1+(r’(x)-r(x))\le 1+3(r’(x)-r(x))$&lt;/p&gt;

&lt;h2 id=&quot;case-c-zig-zag&quot;&gt;Case (c) (zig-zag)&lt;/h2&gt;

&lt;p&gt;Total cost involves 2 rotation and potential change $\Delta \phi=r’(x)+r’(y)+r’(z)-r(x)-r(y)-r(z)$&lt;/p&gt;

&lt;p&gt;Here $\hat c_i=2+(r’(x)-r(x))+r’(y)+r’(z)-r(y)-r(z)$&lt;/p&gt;

&lt;p&gt;Also $n’(y)+n’(z)= n’(x)-1\le n’(x)$. Using the lemma $\log (n’(y)) + \log (n’(z))\le 2\log (n’(x))-2$ or $r’(y)+r’(z)\le 2r’(x)-2$.&lt;/p&gt;

&lt;p&gt;So we have $\hat c_i\le 2+ (r’(x)-r(x))+(2r’(x)-2)-r(y)-r(z)$ or $\hat c_i\le (3r’(x)-r(x)-r(y)-r(z)$. Also we have $r(z)=r(x)$ and $r(y)\ge  r(x)$ so $\hat c_i\le 3(r’(x)-r(x))$&lt;/p&gt;

&lt;h2 id=&quot;case-b-zig-zig&quot;&gt;Case (b) (zig-zig)&lt;/h2&gt;

&lt;p&gt;Total cost involves 2 rotation and potential change&lt;/p&gt;

&lt;p&gt;Similar to &lt;strong&gt;case (c)&lt;/strong&gt; we have $\hat c_i=2+(r’(x)-r(x))+r’(y)+r’(z)-r(y)-r(z)$ and $n(x)+n’(z)+1=n’(x)$ giving $r(x)+r’(z)\le 2r’(x)-2$ or $r’(z)\le 2r’(x)-r(x)-2$&lt;/p&gt;

&lt;p&gt;So we have $\hat c_i\le 2+(r’(x)-r(x))+r’(y)+(2r’(x)-r(x)-2)-r(y)-r(z)$ or $\hat c_i\le (3r’(x)-2r(x))+r’(y)-r(y)-r(z)$. Also we have $r(z)=r’(x)$ and  $r(y)\ge r(x) $ giving $\hat c_i\le 3(r’(x)-r(x))-\underbrace{(r(z)-r’(y))}_{&amp;gt;0}\ge 3(r’(x)-r(x))$&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;If we have $d$ splays then $\hat c=\sum_{i=1}^d\hat c_i\le \sum_{i=1}^d3(r_i(x)-r_{i-1}(x))=3(r_d(x)-r_0(x))$&lt;/p&gt;

&lt;p&gt;The maximum change in rank can be $\log n$ giving $\hat c\le 3\log n$&lt;/p&gt;

</description>
        <pubDate>Tue, 29 Oct 2019 18:42:00 +0000</pubDate>
        <link>https://adityagupta1089.github.io/notes/data%20structures/splay-trees.html</link>
        <guid isPermaLink="true">https://adityagupta1089.github.io/notes/data%20structures/splay-trees.html</guid>
        
        
        <category>Notes</category>
        
        <category>Data Structures</category>
        
      </item>
    
      <item>
        <title>Fast Fourier Transform</title>
        <description>&lt;h1 id=&quot;motivation&quot;&gt;Motivation&lt;/h1&gt;

&lt;p&gt;The product of two $d$-degree polynomials is a polynomial of degree $2d$, i.e. if $A(x)=a_0+a_1x+a_2x^2+\ldots+a_dx^d$ and $B(x)=b_0+b_1+b_2x^2+\ldots+b_dx^d$ then&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A(x)B(x)=a_0b_k+a_1b_{k-1}+\ldots+a_kb_0=\sum_{i=0}^{k}a_i b_{k-i}&lt;/script&gt;

&lt;p&gt;Computing $c_k$ from this formula takes $O(k)$ steps aand finding all $2d+1$ coefficients would therefore take $\Theta(d^2)$&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A degree-$d$ polynomial is uniquely characterized by its values at any $d+1$ distinct points.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can represent a degree-$d$ polynomial $A(x)$ by either (i) it’s coefficients $a_0, a_1,\ldots a_d$ or (ii) the values $A(x_0), A(x_1),\ldots A(x_d)$&lt;/p&gt;

&lt;p&gt;In the second representation polynomial multiplication takes linear time.&lt;/p&gt;

&lt;h1 id=&quot;evaluation-by-divide-and-conquer&quot;&gt;Evaluation by divide-and-conquer&lt;/h1&gt;

&lt;p&gt;If we choose the $n$ points for evaluation of $A(x)$ as:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\pm x_0, \pm x_1, \ldots, \pm x_{n/2-1}&lt;/script&gt;

&lt;p&gt;then the computatin required for each $A(x_i)$ and $A(-x_i)$ overlap a lot because the even powers of $x_i$ coincide with those of $-x_i$.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A(x)=(a_0+a_2x^2+a_4x^4+\ldots)+x(a_1+a_3x^2+\ldots)
A(x)=A_{\rm even}(x^2)+xA_{\rm odd}(x^2)&lt;/script&gt;

&lt;p&gt;hence&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;A(x_i)=A_e(x_i^2)+x_iA_o(x_i^2)
A(-x_i)=A_e(x_i^2)-x_iA_o(x_i^2)&lt;/script&gt;

&lt;p&gt;Noew we need to evaluate $A_e(x)$ and $A_o(x)$ (which each have half the degree of $A(x)$) at just $n/2$ points, $x_0^2,\ldots x_{n/2-1}^2$.&lt;/p&gt;

&lt;p&gt;If we could recurse then time complexity would be $T(n)=2T(n/2)+O(n)\implies O(n\log n)$. The plus-minus trick only works at the top level of the recursion. To recurse at the next level, we need the $n/2$ evaluation points $x_0^2, x_1^2,\ldots x_{n/2-1}^2$ to be themselves plus-minus pairs. For this we take $n^{\rm th}$ roots of unity as the evaluation points.&lt;/p&gt;

&lt;h1 id=&quot;interpolation&quot;&gt;Interpolation&lt;/h1&gt;

&lt;p&gt;We have $\rm \langle values\rangle = FFT(\langle coefficients\rangle, \omega)$. where the complex roots of unity are ${1,\omega,\omega^2,\ldots,\omega^{n-1}}$&lt;/p&gt;

&lt;p&gt;We have:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://adityagupta1089.github.io/images/fft1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Call the matrix in the middle $M$. Its specialized format - a &lt;em&gt;Vandermonde&lt;/em&gt; matrix gives its many remarkable properties&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If $x_0, \ldots x_{n-1}$ are distinct numbers, then $M$ is invertible. Vandermonde matrices are quicker to invert than more general matrices in $O(n^2)$ instead of $O(n^3)$. However, this is still not fast enough so we turn to complex roots of unity.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;interpolation-resolved&quot;&gt;Interpolation resolved&lt;/h2&gt;

&lt;p&gt;The FFT multiplies an arbitary $n$-dimensional vector (&lt;em&gt;coefficient representation&lt;/em&gt;) by the $n\times n$ matrix&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://adityagupta1089.github.io/images/fft2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s $(j,k)^{\rm th}$ entry is $\omega^{jk}$. The columns of $M$ are orthogonal to each other and are called &lt;em&gt;Fourier basis&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Take $\omega=e^{2\pi i/n}$ and $\langle u, v\rangle = u_0\overline{v_0}+u_1\overline{v_1}+\ldots u_{n-1}\overline{v_{n-1}}$ where $\overline {re^{i\theta}}=re^{-i\theta}$.&lt;/p&gt;

&lt;p&gt;Multiplication of columns $j$ and $k$ of matrix $M$ gives&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;1+\omega^{j-k}+\omega^{2(j-k)}+\ldots+\omega^{(n-1)(j-k)}=\frac{(1-\omega^{n(j-k)})}{(1-\omega^{j-k})}&lt;/script&gt;

&lt;p&gt;which is a Geometric series which is $0$  except $j=k$ in which case all terms are $1$ and sum is $n$.&lt;/p&gt;

&lt;p&gt;Thus $M\overline {M}=nI$ or $M^{-1}=\frac 1n\overline {M}$. The $(j, k)^{\rm th}$ entry of $\overline M$ is the complex conjugate of the correspoding entry of $M$, i.e. $\omega ^{-jk}$. So $\overline {M}=M_n(\omega^{-1})$&lt;/p&gt;

&lt;p&gt;So we have $ \langle {\rm coefficient}\rangle = \frac 1n \rm FFT(\langle values\rangle, \omega^{-1})$&lt;/p&gt;
</description>
        <pubDate>Tue, 29 Oct 2019 00:00:00 +0000</pubDate>
        <link>https://adityagupta1089.github.io/notes/algorithms/fast-fourier-transform.html</link>
        <guid isPermaLink="true">https://adityagupta1089.github.io/notes/algorithms/fast-fourier-transform.html</guid>
        
        
        <category>Notes</category>
        
        <category>Algorithms</category>
        
      </item>
    
      <item>
        <title>Chess &amp; Force</title>
        <description>&lt;h1 id=&quot;basic-tactics&quot;&gt;Basic Tactics&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;The Pin&lt;/li&gt;
  &lt;li&gt;The Fork&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;laying-traps&quot;&gt;Laying Traps&lt;/h1&gt;
&lt;h2 id=&quot;a-pair-of-weaklings&quot;&gt;A Pair of Weaklings&lt;/h2&gt;

&lt;div class=&quot;chess&quot;&gt;
[Title &quot;Scholar's Mate&quot;]

1. e4 e5
2. Bc4 Nc6
3. Qh5 Nf6??
4. Qxf7#
&lt;/div&gt;

&lt;div class=&quot;chess&quot;&gt;
[Title &quot;Legall's Mate&quot;]

1. e4 e5
2. Nf3 d6
3. Nc3 g6
4. Bc4 Bg4?
{Black has tied down White's Knight on f3 with a pin. However, his Bishop is undefended on g4 and White's army is better developed. White can now launch a surprise attack against square f7.}
5. Nxe5!!
{Black should now limit his losses and play 5...dxe5 which White would respond with 6.Qxg4. However, instead of losing a pawn, Black eats White's Queen} Bxd1?
{So Black captures a Queen. But now Black's pawn on f7 falls and White's attack crashes through}
6. Bxf7+ Ke7
7. Nd5#
&lt;/div&gt;

&lt;h2 id=&quot;the-case-of-undefended-piece&quot;&gt;The Case of Undefended Piece&lt;/h2&gt;

&lt;div class=&quot;chess&quot;&gt;
[Title &quot;The Excommunicated Bishop&quot;]

1. e4 e5 2. Nf3 d6 3. Bc4 Nc6 4. Nc3 Bg4 5. O-O {The Legall's Mate move 5.Nxe5, would not work here because Black can play 5...Nxe5! to prevent the checkmate and defend the Bishop on g4} Nge7?? {He would do better to play 5...Nf6 simply defending the Bhisop on g4} 6. Bxf7+ Kxf7 7. Ng5+ {The knight checks, thereby uncovering a Queen attack on the Black Bishop} Ke8 8. Qxg4
&lt;/div&gt;

&lt;div class=&quot;chess&quot;&gt;
[Title &quot;The Queen That Never Came Home&quot;]

1. e4 d5 2. exd5 Qxd5 3. Nc3 Qd8 4. d4 e6 5. Bd3 Qxd4?? {Black thinks that White has overlooked a pawn but a surprise is in store} 6. Bb5+!
&lt;/div&gt;

&lt;h2 id=&quot;the-battering-ram&quot;&gt;The Battering Ram&lt;/h2&gt;

&lt;div class=&quot;chess&quot;&gt;
[Title &quot;Fool's Mate&quot;]

1. f4 {This move is called the &lt;i&gt;Bird Opening&lt;/i&gt;} e6
2. g4?? {For no reason whatsoever White has opened up his own King to attack on the e1-h4 diagonal} Qh4#
(1...e5 2.fxe5 {With this second move, White avoids g3 leading to checkmate} (2. g3 exf4 3. gxf4?? Qh4#) d6 {Black is not tempted by Qh4+ which would be adequately countered by g3 when Black's Queen must retreat} (2...Qh4+ 3.g3) 3. exd6 Bxd6 {Black has sacrificed a pawn so that he can obtain a lead in development. This type of deliberate sacrifice in the opening is called a &lt;i&gt;gambit&lt;/i&gt;} 4. Nc3?? {Oops White didn't see the threat. He should have played Nf4 which would develop a piece and prevent ...Qh4+} Qh4+ 5. g3 Qxg3+!! 6. hxg3 Bxg3#)
&lt;/div&gt;

&lt;div class=&quot;chess&quot;&gt;
[Title &quot;The Cheap Check&quot;]

1. e4 c6 2. d4 d5 3. Nc3 dxe4 4. Nxe4 Nd7 5. Qe2 Ngf6 6. Nd6#
&lt;/div&gt;

&lt;h1 id=&quot;endgames&quot;&gt;Endgames&lt;/h1&gt;
&lt;ul&gt;
  &lt;li&gt;King &amp;amp; Queen vs. King&lt;/li&gt;
  &lt;li&gt;King &amp;amp; Rook vs. King&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Mon, 28 Oct 2019 16:01:00 +0000</pubDate>
        <link>https://adityagupta1089.github.io/chess/notes/chess-force.html</link>
        <guid isPermaLink="true">https://adityagupta1089.github.io/chess/notes/chess-force.html</guid>
        
        
        <category>Chess</category>
        
        <category>Notes</category>
        
      </item>
    
      <item>
        <title>Bobby Fischer Teaches Chess (Back-Rank Mating)</title>
        <description>&lt;p&gt;This book talks about&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Introduction: How to play chess
    &lt;ul&gt;
      &lt;li&gt;Description of the Board &amp;amp; Pieces&lt;/li&gt;
      &lt;li&gt;Moving &amp;amp; Capturing&lt;/li&gt;
      &lt;li&gt;Special Moves: Castling, Pawn Promotion, Capturing En Passant&lt;/li&gt;
      &lt;li&gt;Piece Values: Pawn(1), Knight(3), Bishop(3.25), Rook(5), Queen(9), King(Infinity)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Chapter 1: Elements of Checkmate
    &lt;ul&gt;
      &lt;li&gt;Conditions of checkmate&lt;/li&gt;
      &lt;li&gt;Defenses: capturing, fleeing, interposing&lt;/li&gt;
      &lt;li&gt;Pins&lt;/li&gt;
      &lt;li&gt;Discovered checks&lt;/li&gt;
      &lt;li&gt;Mate in 1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Chapter 2: Back-Rank Mates
    &lt;ul&gt;
      &lt;li&gt;Useful/Useless Interposition&lt;/li&gt;
      &lt;li&gt;Amount of power needed to mate&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Chapter 3: Back-Rank Defenses and Variations
    &lt;ul&gt;
      &lt;li&gt;Removing/Capturing the defenders&lt;/li&gt;
      &lt;li&gt;disconnected rooks&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;https://adityagupta1089.github.io/images/fischer1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;
    &lt;ul&gt;
      &lt;li&gt;sideways back-rank&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Chapter 4: Displacing Defenders
    &lt;ul&gt;
      &lt;li&gt;Drawing away defenders&lt;/li&gt;
      &lt;li&gt;Displacing the king&lt;/li&gt;
      &lt;li&gt;Displacing the king in 2 moves&lt;/li&gt;
      &lt;li&gt;Defense against displacement of king in 2 Moves&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Chapter 5: Attacks on the enemy pawn cover
    &lt;ul&gt;
      &lt;li&gt;Sacrifice leading to mate&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;chapter-6-final-review&quot;&gt;Chapter 6: &lt;strong&gt;Final Review&lt;/strong&gt;&lt;/h1&gt;
&lt;h2 id=&quot;mating-themes&quot;&gt;Mating Themes&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;Elementary back-rank mate&lt;/li&gt;
  &lt;li&gt;Back-rank combination (more power)&lt;/li&gt;
  &lt;li&gt;Eliminating a back-rank defender, enemy recaptures using&lt;/li&gt;
  &lt;li&gt;Rook/Queen&lt;/li&gt;
  &lt;li&gt;King&lt;/li&gt;
  &lt;li&gt;Drawing away a defender&lt;/li&gt;
  &lt;li&gt;Driving away the enemy king&lt;/li&gt;
  &lt;li&gt;Queen&lt;/li&gt;
  &lt;li&gt;Bishop&lt;/li&gt;
  &lt;li&gt;Knight&lt;/li&gt;
  &lt;li&gt;Rook&lt;/li&gt;
  &lt;li&gt;Queen sacrifice&lt;/li&gt;
  &lt;li&gt;Rook mates&lt;/li&gt;
  &lt;li&gt;Rook checks
    1. enemy rook interposes, bishop mates
    2. enemy piece interposes, back-rank combination&lt;/li&gt;
  &lt;li&gt;Mating a hemmed-in King&lt;/li&gt;
  &lt;li&gt;Hemming the king, sacrificing and mating
    &lt;h2 id=&quot;the-defenses&quot;&gt;The Defenses&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;Capturing a checking piece with appropriate piece&lt;/li&gt;
  &lt;li&gt;Interposing&lt;/li&gt;
  &lt;li&gt;King fleeing
    &lt;h2 id=&quot;pins&quot;&gt;Pins&lt;/h2&gt;
  &lt;/li&gt;
  &lt;li&gt;Pinned piece cannot capture&lt;/li&gt;
  &lt;li&gt;However it can support a checkmate&lt;/li&gt;
&lt;/ol&gt;
</description>
        <pubDate>Mon, 28 Oct 2019 14:15:00 +0000</pubDate>
        <link>https://adityagupta1089.github.io/chess/notes/bobby-fischer-teaches-chess.html</link>
        <guid isPermaLink="true">https://adityagupta1089.github.io/chess/notes/bobby-fischer-teaches-chess.html</guid>
        
        
        <category>Chess</category>
        
        <category>Notes</category>
        
      </item>
    
      <item>
        <title>Strassen Matrix Multiplication</title>
        <description>&lt;p&gt;The product of two $n\times n$ matrices $X$ and $Y$ which takes $O(n^3)$&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
X=\begin{bmatrix}A&amp;B\\C&amp;D\end{bmatrix} %]]&gt;&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
Y=\begin{bmatrix}E&amp;F\\G&amp;H\end{bmatrix} %]]&gt;&lt;/script&gt;

&lt;p&gt;is 
&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
XY=\begin{bmatrix}A&amp;B\\C&amp;D\end{bmatrix}\begin{bmatrix}E&amp;F\\G&amp;H\end{bmatrix}=\begin{bmatrix}AE+BG&amp;AF+BH\\CE+DG&amp;CF+DH\end{bmatrix} %]]&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;here $T(n)=8T(n/2)+O(n^2)\implies O(n^3)$&lt;/p&gt;

&lt;p&gt;Strassen gave:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
XY=\begin{bmatrix}P_5+P_4-P_2+P_6&amp;P_1+P_2\\P_3+P_4&amp;P_1+P_5-P_3-P_7\end{bmatrix}
\ %]]&gt;&lt;/script&gt;

&lt;p&gt;where&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
P_1&amp;=A(F-H)&amp;P_5&amp;=(A+D)(E+H)\\
P_2&amp;=(A+B)H&amp;P_6&amp;=(B-D)(G+H)\\
P_3&amp;=(C+D)E&amp;P_7&amp;=(A-C)(E+F)\\
P_4&amp;=D(G-E)\\
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;The new running time is $T(n)=7T(n/2)+O(n^2)$ which by the master theorem works out to be $O(n^{\log_27})\approx O(n^{2.81})$&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Oct 2019 18:46:00 +0000</pubDate>
        <link>https://adityagupta1089.github.io/notes/algorithms/matrix-multiplication.html</link>
        <guid isPermaLink="true">https://adityagupta1089.github.io/notes/algorithms/matrix-multiplication.html</guid>
        
        
        <category>Notes</category>
        
        <category>Algorithms</category>
        
      </item>
    
      <item>
        <title>Mergesort, Quicksort and Quickselect</title>
        <description>&lt;h1 id=&quot;mergesort&quot;&gt;Mergesort&lt;/h1&gt;

&lt;p&gt;Split the list into 2 halves, recursively sort each half and then merge the two sorted sublists. For merging $x[1..k]$ and $y[1..l]$ into $z[1..k+l]$. The first element of $z$ is smaller of $x[1]$ and $y[1]$ and rest can be constrcuted recrusively.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
\text{mergesort}(a[1..n]) =&amp;\text{merge}(\text{mergesort}(a[1..\lfloor n/2\rfloor]),\\&amp;\quad\text{mergesort}(a[\lfloor n/2\rfloor+1...n]))\\
\text{merge}(x[1..k],y[1..l])=&amp;\begin{cases}x[1]\circ\text{merge}(x[2..k],y[1..l])&amp;x[1]\le y[1]\\y[1]\circ\text{merge}(x[1..k],y[2..l])&amp;\text{otherwise}\end{cases}
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;Time Complexity $T(n)=2T(n/2)+O(n)\implies O(n\log n)$&lt;/p&gt;

&lt;h1 id=&quot;quicksort--quickselect&quot;&gt;Quicksort &amp;amp; Quickselect&lt;/h1&gt;

&lt;p&gt;Select a pivot $v$ (pick randomly). Split the array into three categories: elements smaller than $v$, those equal to $v$ and those greater than $v$. Call these $S_L$, $S_v$, and $S_R$ respectively. Recursively sort the array.&lt;/p&gt;

&lt;p&gt;Time complexity: $O(n^2)$ worst case. $O(n\log n)$ best and average case.&lt;/p&gt;

&lt;p&gt;For selecting the $k^{\rm th}$ element:
&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\text{selection}=
\begin{cases}
\text{selection(S_L, k)}&amp;k\le |S_L|\\
v &amp;|S_L|&lt;k\le|S_L|+|S_v|\\
\text{selection}(S_R, k-|S_L|-|S_v|)&amp;k&gt;|S_L|+|S_v|
\end{cases} %]]&gt;&lt;/script&gt;
Time complexity: $T(n)=T(n/2)+O(n)\implies O(n)$&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Oct 2019 18:35:00 +0000</pubDate>
        <link>https://adityagupta1089.github.io/notes/algorithms/mergesort-quicksort-quickselect.html</link>
        <guid isPermaLink="true">https://adityagupta1089.github.io/notes/algorithms/mergesort-quicksort-quickselect.html</guid>
        
        
        <category>Notes</category>
        
        <category>Algorithms</category>
        
      </item>
    
      <item>
        <title>Master's Theorem</title>
        <description>&lt;p&gt;&lt;strong&gt;Theorem&lt;/strong&gt;: $T(n)=aT(\lceil n/b\rceil)+O(n^d)$ for some constants $a&amp;gt;0,b&amp;gt;1,d\ge 0$ then
&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
T(n)=\begin{cases}
O(n^d)&amp;d&gt;\log_b a\\
O(n^d\log n)&amp;d=\log_ba\\
O(n^{\log_ba})&amp;d&lt;\log_ba
\end{cases} %]]&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Proof&lt;/strong&gt;: &lt;img src=&quot;https://adityagupta1089.github.io/images/mastertheorem.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Each problem of size $n$ is divided into $a$ subproblems of size $n/b$. Each level has problem of size $n/b^k$ and work done is:
&lt;script type=&quot;math/tex&quot;&gt;a^k\times O\left(\frac nb^k\right)^d=O(n^d)\times \left(\frac ab^d\right)^k&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;As $k$ goes from $0$ (root) to $\log_bn$ (the leaves), these form a geometric series with ratio $r=a/b^d$&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;$r&amp;lt;1$: Decreasing series, sum is first term $O(n^d)$&lt;/li&gt;
  &lt;li&gt;$r&amp;gt;1$: Increasing series, sum is last term $O(n^{\log_ba})$&lt;/li&gt;
&lt;/ol&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;n^d\left(\frac a{b^d}\right)^{\log_bn}=n^d\left(\frac{a^{\log_bn}}{(b^{\log_bn})^d}\right)=a^{\log_bn}=a^{(\log_an)(\log_ba)}=n^{\log_ba}&lt;/script&gt;

&lt;ol&gt;
  &lt;li&gt;$r=1$: All $O(\log n)$ terms are equal to $O(n^d)$&lt;/li&gt;
&lt;/ol&gt;

</description>
        <pubDate>Sat, 26 Oct 2019 17:52:00 +0000</pubDate>
        <link>https://adityagupta1089.github.io/notes/algorithms/master-s-theorem.html</link>
        <guid isPermaLink="true">https://adityagupta1089.github.io/notes/algorithms/master-s-theorem.html</guid>
        
        
        <category>Notes</category>
        
        <category>Algorithms</category>
        
      </item>
    
      <item>
        <title>Integer Multiplication</title>
        <description>&lt;p&gt;To multiply $x$ and $y$, split them into left and right halves which are $n/2$ bits long.&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;% &lt;![CDATA[
\begin{align}
x&amp;=2^{n/2}x_L+x_R\\
y&amp;=2^{n/2}y_L+y_R\\
xy&amp;=(2^{n/2}x_L+x_R)(2^{n/2}y_L+y_R)\\
&amp;=2^nx_Ly_L+2^{n/2}(x_Ly_R+x_Ry_L)+x_Ry_R\\
x_Ly_R+x_Ry_R&amp;=(x_L+x_R)(y_L+y_R)-x_Ly_L-x_Ry_R
\end{align} %]]&gt;&lt;/script&gt;

&lt;p&gt;Additional and multiplication by power of 2 takes linear time. We only need to calculate $x_Ly_L$, $x_Ry_R$ and $(x_L+x_R)(y_L+y_R)$ which we can calculate recursively.&lt;/p&gt;

&lt;p&gt;$T(n)=3T(n/2)+O(n)\implies T(n)=O(n^{\log_23})=O(n^{1.59})$&lt;/p&gt;
</description>
        <pubDate>Thu, 24 Oct 2019 15:02:00 +0000</pubDate>
        <link>https://adityagupta1089.github.io/notes/algorithms/integer-multiplication.html</link>
        <guid isPermaLink="true">https://adityagupta1089.github.io/notes/algorithms/integer-multiplication.html</guid>
        
        
        <category>Notes</category>
        
        <category>Algorithms</category>
        
      </item>
    
      <item>
        <title>Heaps - Binary, Binomial, Fibonacci</title>
        <description>&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Procedure&lt;/th&gt;
      &lt;th&gt;Binary Heap&lt;/th&gt;
      &lt;th&gt;Binomial Heap (worst case)&lt;/th&gt;
      &lt;th&gt;Fibonacci Heap (amortized)&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Make Heap&lt;/td&gt;
      &lt;td&gt;$\Theta(1)$&lt;/td&gt;
      &lt;td&gt;$\Theta(1)$&lt;/td&gt;
      &lt;td&gt;$\Theta(1)$&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Insert&lt;/td&gt;
      &lt;td&gt;$\Theta(\lg n)$&lt;/td&gt;
      &lt;td&gt;$O(\lg n)$&lt;/td&gt;
      &lt;td&gt;$\Theta(1)$&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Minimum&lt;/td&gt;
      &lt;td&gt;$\Theta(1)$&lt;/td&gt;
      &lt;td&gt;$O(\lg n)$&lt;/td&gt;
      &lt;td&gt;$\Theta(1)$&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Extract Min&lt;/td&gt;
      &lt;td&gt;$\Theta(\lg n)$&lt;/td&gt;
      &lt;td&gt;$\Theta(\lg n)$&lt;/td&gt;
      &lt;td&gt;$\Theta(\lg n)$&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Union&lt;/td&gt;
      &lt;td&gt;$\Theta(n)$&lt;/td&gt;
      &lt;td&gt;$O(\lg n)$&lt;/td&gt;
      &lt;td&gt;$\Theta(1)$&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Decrease Key&lt;/td&gt;
      &lt;td&gt;$\Theta(\lg n)$&lt;/td&gt;
      &lt;td&gt;$\Theta(\lg n)$&lt;/td&gt;
      &lt;td&gt;$\Theta(1)$&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Delete&lt;/td&gt;
      &lt;td&gt;$\Theta(\lg n)$&lt;/td&gt;
      &lt;td&gt;$\Theta(\lg n)$&lt;/td&gt;
      &lt;td&gt;$\Theta(\lg n)$&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;binary-heap&quot;&gt;Binary Heap&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;https://adityagupta1089.github.io/images/heap1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A binary heap is an array object which we can view as a nearly complete binary tree with pointers as follows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Parent: $\lfloor i/2\rfloor$&lt;/li&gt;
  &lt;li&gt;Left child: $2i$&lt;/li&gt;
  &lt;li&gt;Right child: $2i+1$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These satisfy the &lt;strong&gt;heap property,&lt;/strong&gt; i.e. for max-heap $A[{\rm Parent}(i)]\ge A[i]$ or vice versa for min-heap. A heap of height $h$ can have nodes from $2^h$(1 node at last level) to $2^{h+1}-1$(full tree). So $h\le \lg n \le h+1$ so $h=\lfloor \lg n\rfloor$.&lt;/p&gt;

&lt;h2 id=&quot;heapify-oholg-n&quot;&gt;Heapify $O(h)=O(\lg n)$&lt;/h2&gt;

&lt;p&gt;If binary tree at ${\rm Left}(i)$ and ${\rm Right}(i)$ satisfy the heap property but $A[i]$ does not then we need to perform heapify operation. In max-heap we exchange $A[i]$ with the largest of ${\rm Right}(i)$ and ${\rm Left}(i)$ and recursively perform heapify operation at the exchanged node (the new parent).&lt;/p&gt;

&lt;h2 id=&quot;building-on&quot;&gt;Building $O(n)$&lt;/h2&gt;

&lt;p&gt;Elements from $\lfloor n/2\rfloor+1$ to $n$ are all leaves of the tree so each is a 1-element heap. We run heapify on rest of the elements in order from $\lfloor n/2\rfloor$ to $1$. Total time taken for height $i$ is $2^i\cdot O(h-i)$. Sum over all levels is 
&lt;script type=&quot;math/tex&quot;&gt;O(\sum_{i=0}^{\lg n} 2^{h-i}.i) =O\left(\sum _{i=0}^{\lg n}2^h . \frac i{2^i}\right)=O\left(n\cdot\sum_{i=0}^{\lg n}\frac i{2^i}\right)=O(n)&lt;/script&gt;
Where $\sum_{x=0}^\infty x/2^x=x/(1-x)^2$ and we put $x=1/2$ to get $\sum i/2^i\le 2$.&lt;/p&gt;

&lt;h2 id=&quot;extract-min-olg-n&quot;&gt;Extract Min $O(\lg n)$&lt;/h2&gt;

&lt;p&gt;Replace min value with last element and perform heapify after removing the min element.&lt;/p&gt;

&lt;h1 id=&quot;binomial-heap&quot;&gt;Binomial Heap&lt;/h1&gt;

&lt;p&gt;A binomial tree $B_k$ is defined recursively consisting of two $B_{k-1}$ linked together.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://adityagupta1089.github.io/images/heap2.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;A tree $B_k$&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Contains $2^k$ nodes&lt;/li&gt;
  &lt;li&gt;has height $k$&lt;/li&gt;
  &lt;li&gt;there are $k \choose i$ nodes at depth $i$ (which gives it the name &lt;strong&gt;binomial heap&lt;/strong&gt;)&lt;/li&gt;
  &lt;li&gt;root has degree $k$&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;A binomial heap $H$:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Each binomial tree is heap ordered.&lt;/li&gt;
  &lt;li&gt;there is atmost 1 tree whose root has a given degree.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So a binomial heap $H$ has atmost $\lfloor\lg n\rfloor+1$ binomial trees (from binary representation)&lt;/p&gt;

&lt;h2 id=&quot;finding-min-olg-n&quot;&gt;Finding Min $O(\lg n)$&lt;/h2&gt;

&lt;p&gt;See the roots of all $O(\lg n)$ trees.&lt;/p&gt;

&lt;h2 id=&quot;uniting-two-binomial-heaps-olg-n&quot;&gt;Uniting two binomial heaps $O(\lg n)$&lt;/h2&gt;

&lt;p&gt;For merging two binomial trees $B_{k-1}$ with roots $y$ and $z$ we would make $z$ parent of $y$ and make the child of $z$ sibling of $y$. This takes $O(1)$ time.&lt;/p&gt;

&lt;p&gt;For merging two heaps we would do the same as binary addition. This would take $O(\lg n)$ time as there are atmax $\lg n$ trees.&lt;/p&gt;

&lt;h2 id=&quot;inserting-a-node-olg-n&quot;&gt;Inserting a node $O(\lg n)$&lt;/h2&gt;

&lt;p&gt;Create $B_0$ with the node and perform heap union.&lt;/p&gt;

&lt;h2 id=&quot;extracting-min-olg-n&quot;&gt;Extracting Min $O(\lg n)$&lt;/h2&gt;

&lt;p&gt;Merge the children of the tree with minimunm key with the rest of the trees.&lt;/p&gt;

&lt;h2 id=&quot;decreasing-a-key-olg-n&quot;&gt;Decreasing a key $O(\lg n)$&lt;/h2&gt;

&lt;p&gt;Change key value and perform heapify operation.&lt;/p&gt;

&lt;h2 id=&quot;deleting-a-key-olg-n&quot;&gt;Deleting a key $O(\lg n)$&lt;/h2&gt;

&lt;p&gt;Decrease key to $-\infty$ and extract min.&lt;/p&gt;

&lt;h1 id=&quot;fibonacci-heap&quot;&gt;Fibonacci Heap&lt;/h1&gt;

&lt;p&gt;A Fibonacci heap is a collection of trees that are heap-ordered connected in a circular, doubly linked list. Each node may also be marked. We also store the minimum of the heap using a separate pointer.&lt;/p&gt;

&lt;p&gt;Suppose&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;At some time, $x$ was a root.&lt;/li&gt;
  &lt;li&gt;then $x$ was linked to (made child of) another node&lt;/li&gt;
  &lt;li&gt;then two children of $x$ were removed by cut operation&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As soon as second child has been lost we remove $x$ from it’s parents making it a new root. $x.{\rm mark}$ is true if steps $1$ and $2$ have occured and one child of $x$ has been cut.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Maximum degree of a node is $D(n)\le \lfloor\log_{\phi}n\rfloor$ where $\phi$ is the golden ration $\phi=(1+\sqrt 5)/2$. Hence $D(n)\le O(\lg n)$&lt;/p&gt;

&lt;h2 id=&quot;potential&quot;&gt;Potential&lt;/h2&gt;

&lt;p&gt;$t(H)$ represents the number of trees in heap $H$ and $m(H)$ represents the number of marked nodes in $H$. We define the potential of $H$ as $\phi(H)=t(H)+2m(H)$&lt;/p&gt;

&lt;h2 id=&quot;create-a-new-heap-o1&quot;&gt;Create a new heap $O(1)$&lt;/h2&gt;

&lt;p&gt;Just allocate empty heap $H$ with $0$ trees and &lt;code class=&quot;highlighter-rouge&quot;&gt;NULL&lt;/code&gt; min pointer $\phi(H)=0$&lt;/p&gt;

&lt;h2 id=&quot;insert-a-node-o1&quot;&gt;Insert a node $O(1)$&lt;/h2&gt;

&lt;p&gt;Just insert the node in the root list and update min-pointer if necessary. $\Delta\phi(H)=1$&lt;/p&gt;

&lt;h2 id=&quot;finding-the-min-o1&quot;&gt;Finding the min $O(1)$&lt;/h2&gt;

&lt;p&gt;Return the value pointed by min pointer. $\Delta \phi(H)=0$&lt;/p&gt;

&lt;h2 id=&quot;uniting-two-fibonacci-heaps-o1&quot;&gt;Uniting two fibonacci heaps $O(1)$&lt;/h2&gt;

&lt;p&gt;Concatenate two root lists and update min-pointer if necessary. 
&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{align}\Delta\phi(H)&amp;=\phi(H)-\phi(H_1)-\phi(H_2)\\&amp;=(t(H)+2m(H))-((t(H_1)+2m(H_1))+(t(H_2)+2m(H_2)))
\\&amp;=0\end{align} %]]&gt;&lt;/script&gt;&lt;/p&gt;

&lt;p&gt;since $t(H)=t(H_1)+t(H_2)$ and $m(H)=m(H_1)+m(H_2)$&lt;/p&gt;

&lt;h2 id=&quot;extracting-the-min-node-olg-n&quot;&gt;Extracting the min node $O(\lg n)$&lt;/h2&gt;

&lt;p&gt;Add the children of tree whose root is pointer by min-pointer to the root list of $H$ and then remove it from the root list. Also update min pointer. This takes $O(D(n))$. Then consolidate the root list by linking roots of equal degrees until atmost one root remains of each degree. To link $y$ and $x$ remove $y$ from root list of $H$ and make $y$ child of $x$ and unmark $y$ is previously marked (step 2).&lt;/p&gt;

&lt;p&gt;The above operation will increate elements in root list to at most $D(n)+t(H)-1$, original $t(H)$ minus $1$ extracted node, new $D(n)$ children of extracted node. The total time taken for combining roots is therefore atmost $O(D(n)+t(H))$.&lt;/p&gt;

&lt;p&gt;The potential before is $t(H)+2m(H)$ and afterwards at most $(D(n)+1)+2m(H)$. Thus amortized cost is
&lt;script type=&quot;math/tex&quot;&gt;% &lt;![CDATA[
\begin{align}
&amp;O(D(n)+t(H))+((D(n)+1)+2m(H))-(t(H)+2m(H))\\
&amp;=O(D(n))+O(t(H))-t(H))\\
&amp;=O(D(n))
\end{align} %]]&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;decreasing-a-key-o1&quot;&gt;Decreasing a key $O(1)$&lt;/h2&gt;

&lt;p&gt;Cut the link between the node $x$ with the key and it’s parent $y$, making $x$ the root (also unmark it if marked, step 1). This is a cut operation.  Then perform a cascading cut where:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;If $y$ is unmarked then mark it (since it has lost it’s first child)&lt;/li&gt;
  &lt;li&gt;Else perform cut operation at $y$ and perform cascading cut at $y$’s parent.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This goes on until a unmarked node or root is found. Finally we update the min-pointer. Total time taken is $O(1)$ for decreasing key, $O(c)$ for cascading cuts consisting of $c$ total cuts.&lt;/p&gt;

&lt;p&gt;For change in potential:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Cutting $x$ from $y$ creates a new tree rooted at $x$ and clears $x$’s mark bit.&lt;/li&gt;
  &lt;li&gt;Each call of the cascading cut except for the last one cuts a marked node and clears the mark bit. Finally fibonacci heap contains $t(H)+c$ trees ($t(H)$ original, $c-1$ from cascading cuts and $1$ from $x$) and at most $m(H)-c+2$ marked nodes ($m(H)$ original, $c-1$ unmarked from cascading cuts except last one which marked $1$ node).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;$((t(H)+c)+2(m(H)-c+2))-(t(H)+2m(H))=4-c$&lt;/p&gt;

&lt;p&gt;Thus total amortized time taken is $O(c)+4-c=O(1)$&lt;/p&gt;

&lt;p&gt;1 unit of potential pays for (i) cut and clearing the mark bit. (ii) decrease in potential due to node $y$ becoming a root.&lt;/p&gt;

&lt;h2 id=&quot;deleting-a-key-olg-n-1&quot;&gt;Deleting a key $O(\lg n)$&lt;/h2&gt;

&lt;p&gt;Decrease key to $-\infty$ and extract min.&lt;/p&gt;

</description>
        <pubDate>Wed, 23 Oct 2019 00:00:00 +0000</pubDate>
        <link>https://adityagupta1089.github.io/notes/data%20structures/heaps.html</link>
        <guid isPermaLink="true">https://adityagupta1089.github.io/notes/data%20structures/heaps.html</guid>
        
        
        <category>Notes</category>
        
        <category>Data Structures</category>
        
      </item>
    
      <item>
        <title>Range Trees</title>
        <description>&lt;h1 id=&quot;motivation&quot;&gt;Motivation&lt;/h1&gt;

&lt;p&gt;Given a set of $n$ points $P$ on a real line and a query interval $[x:x’]$ find all the points inside the interval.&lt;/p&gt;

&lt;p&gt;Construct a binary search tree from $P$ and perform the following query:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://adityagupta1089.github.io/images/rangetree1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure: Example of searching in range tree&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Search for $x$ and $x’$ until we get to $v_{\rm split}$ where the search path splits.&lt;/li&gt;
  &lt;li&gt;From the left child of $v_{\rm split}$ we continue search with $x$ and at every node $v$ we where search path goes left we all points in right subtree of $v$.&lt;/li&gt;
  &lt;li&gt;Symmetrically we go right from $v_{\rm split}$ searching for $x’$ and taking left subtrees of $v$ respectively.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;definition&quot;&gt;Definition&lt;/h1&gt;

&lt;p&gt;&lt;strong&gt;Canonical Subset of node&lt;/strong&gt; $v$ (i.e. $P(v)$): subset of points stored in the leaves of the subtree at $v$.&lt;/p&gt;

&lt;h1 id=&quot;2-d-range-trees&quot;&gt;2-D Range Trees&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;The main tree is a balanced binary search tree built $T$ built on the x-coordinates of $P$.&lt;/li&gt;
  &lt;li&gt;For any internal node / leaf node $v$ in $T$, the canonical subset $P(v)$ is stored in a balanced binary search tree $T_1(v)$ on the y-coordinates of the points. The node $v$ contains a pointer to the root of $T_1(v)$.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;creation-onlog-n&quot;&gt;Creation $O(n\log n)$&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Use presorted $P$&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Create $T_1(v)$ binary search tree.&lt;/li&gt;
  &lt;li&gt;If $P$ has only one point then create leaf else split $P$ into two sets $P_{\rm left}$ and $P_{\rm right}$ using $x_{\rm mid}$ median point. Recursively create $v_{\rm left}$ and $v_{\rm right}$ from $P_{\rm left}$ and $P_{\rm right}$ respectively. Create a node with $x_{\rm mid}$ and $v_{\rm left}$ and $v_{\rm right}$ left and right children of this node. Make $T_1(v)$ the associated structure of $v$.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;querying-olog-2n-k&quot;&gt;Querying $O(\log ^2n +k)$&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Find $v_{\rm split}$&lt;/li&gt;
  &lt;li&gt;If $v_{\rm split}$ is a leaf check point inside it and report if necessary.&lt;/li&gt;
  &lt;li&gt;Else
    &lt;ul&gt;
      &lt;li&gt;Follow path to $x$ and perform 1-D range query on the subtrees right of the path. Also check if point stored at the final leaf node $v$ must be reported.&lt;/li&gt;
      &lt;li&gt;Similary do for $x’$ and perform 1-D range query on the subtrees left of the path from $v_{\rm split}$. Again check at the end for the point stored at $v$.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;fractional-cascading&quot;&gt;Fractional Cascading&lt;/h2&gt;

&lt;p&gt;If two sets of objects $S_1$ and $S_2$ are stored int sorted arrays $A_1$ and $A_2$. To find keys in $[y:y’]$&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We can binary search for ceil of  $y$ in $A_1$ and then walk along the array until the floor of $y’$. Similary for $S_2$. Total time will be $O(k)$ plus two binary searches ($k$ reported objects).&lt;/li&gt;
  &lt;li&gt;If $S_2\subseteq S_1$ we can maintain pointers from $A_1$ to $A_2$, i.e. we store the pointer to ceil key for every value in $A_1$. This will avoid the second binary search.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://adityagupta1089.github.io/images/rangetree2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure: Layered Range Tree showing only x-coordinates. Full points are given below&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Similarly $P(lc(v))\subseteq P(v)$ and $P(rc(v))\subseteq P(v)$. Instead of associated binary trees we will store an array sorted on the y-coordinates. Each value in the array will additionaly store two pointers to $A(lc(v))$ and $A(rc(v))$. This becomes the &lt;strong&gt;layered range tree&lt;/strong&gt;. This makes the query time $O(\log n + k)$.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://adityagupta1089.github.io/images/rangetree3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Figure: The associated arrays with the nodes.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While querying for $[x:x’]\times[y:y’]$:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We search for $x$, $x’$ and $v_{\rm split}$. At $A(v_{\rm split})$ we we find the ceil entry of $y$.&lt;/li&gt;
  &lt;li&gt;While searching in $x$ and $x’$ in main tree we keep track of ceil entry of $y$ by following pointers in constant time.&lt;/li&gt;
&lt;/ul&gt;

</description>
        <pubDate>Sun, 20 Oct 2019 15:54:00 +0000</pubDate>
        <link>https://adityagupta1089.github.io/notes/data%20structures/range-trees.html</link>
        <guid isPermaLink="true">https://adityagupta1089.github.io/notes/data%20structures/range-trees.html</guid>
        
        
        <category>Notes</category>
        
        <category>Data Structures</category>
        
      </item>
    
  </channel>
</rss>
